import { Controller, Delete, Get, Post, Query } from "@nestjs/common";
import { SymbolExchangeInfo } from "binance";
import { SymbolDocument } from "src/Schemas/Symbol.Schema";
import { CreateSymbol } from "src/Services/BinanceService/Types";
import { BinanceService } from "./../../Services/BinanceService";
import { APIResponse } from "./../../Types/APIResponse.interface";

@Controller("symbols")
export class SymbolsController {
    constructor(private readonly binanceService: BinanceService) { }

    @Post("update-symbols-list")
    async updateSymbolsList(@Query("exchange") exchange): Promise<APIResponse> {
        let response: APIResponse = {
            success: null,
            message: null,
            data: null,
        };

        switch (exchange) {
            case "binance":
                {
                    response.success = true;
                    response.message = "this is a valid exchange name."
                    const symbols: SymbolExchangeInfo[] = await this.binanceService.FetchSymbolsListFromRemote();
                    const existingSymbols = await this.binanceService.FindAllSymbolsFromLocal();

                    const duplicateSymbols: string[] = [];
                    const newSymbols: CreateSymbol[] = [];

                    symbols.forEach(symbol => {
                        const index = existingSymbols.findIndex(s => s.symbol === symbol.symbol.toLowerCase());

                        if (index > -1) {
                            duplicateSymbols.push(symbol.symbol);
                        } else {
                            newSymbols.push({
                                symbol: symbol.symbol,
                                baseAsset: symbol.baseAsset,
                                quoteAsset: symbol.quoteAsset,
                            })
                        }
                    });

                    await this.binanceService.CreateSymbols(newSymbols);

                    response.data = {
                        duplicateSymbols,
                        newSymbols: newSymbols.map(s => s.symbol)
                    }
                    break;
                }
            default:
                response.success = false;
                response.message = "invalid exchange name!!";
                response.data = null;
        }

        return response
    }

    @Delete("remove-all-symbols")
    async removeAllSymbols(@Query("exchange") exchange): Promise<APIResponse> {
        let response: APIResponse = {
            success: null,
            message: null,
            data: null,
        };

        const deleteResult = await this.binanceService.DeleteSymbols({
            symbol: {
                $exists: true
            }
        });

        response.success = true;
        response.message = "symbols successfully deleted!!"
        response.data = {
            deletedCount: deleteResult.deletedCount
        }

        return response;
    }

    @Get("get-all-symbols")
    async getAllSymbols(@Query("exchange") exchange): Promise<APIResponse> {
        let response: APIResponse = {
            success: null,
            message: null,
            data: null,
        };

        const symbols: SymbolDocument[] = await this.binanceService.FindAllSymbolsFromLocal();

        response.success = true;
        response.message = "here is list of the all symbols";
        response.data = {
            count: symbols.length,
            list: symbols.map(s => {
                return {
                    symbol: s.symbol,
                    baseAsset: s.baseAsset,
                    quoteAsset: s.quoteAsset,
                }
            })
        };

        return response;
    }

}